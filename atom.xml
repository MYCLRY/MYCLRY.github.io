<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://myclry.github.io/</id>
    <title>clry</title>
    <updated>2019-06-30T07:40:09.205Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://myclry.github.io/"/>
    <link rel="self" href="https://myclry.github.io//atom.xml"/>
    <subtitle>赤龙绕月</subtitle>
    <logo>https://myclry.github.io//images/avatar.png</logo>
    <icon>https://myclry.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, clry</rights>
    <entry>
        <title type="html"><![CDATA[Redis学习]]></title>
        <id>https://myclry.github.io//post/redis-xue-xi</id>
        <link href="https://myclry.github.io//post/redis-xue-xi">
        </link>
        <updated>2019-06-24T12:40:31.000Z</updated>
        <summary type="html"><![CDATA[<p>Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持字符串、哈希表、列表、集合、有序集合，位图，hyperloglogs等数据类型。内置复制、Lua脚本、LRU收回、事务以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持字符串、哈希表、列表、集合、有序集合，位图，hyperloglogs等数据类型。内置复制、Lua脚本、LRU收回、事务以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。</p>
<!-- more -->
<p><a href="https://www.redis.net.cn/">Redis中文网</a></p>
<p><a href="https://github.com/MicrosoftArchive/redis/tags">Redis window版</a></p>
<p><a href="https://www.redis.net.cn/tutorial/3501.html">Redis 教程</a></p>
<p><a href="https://www.runoob.com/redis/redis-install.html">runoob网 redis学习</a></p>
<h1 id="启动zip版本">启动zip版本</h1>
<h2 id="服务器">服务器</h2>
<p>使用 cd 命令切换目录到 C:\redis 运行：</p>
<pre><code>redis-server.exe redis.windows.conf
</code></pre>
<h2 id="客户端">客户端</h2>
<p>这时候另启一个 cmd 窗口，原来的不要关闭，不然就无法访问服务端了。</p>
<p>切换到 redis 目录下运行:</p>
<pre><code>redis-cli.exe -h 127.0.0.1 -p 6379
</code></pre>
<h1 id="redis命令">Redis命令</h1>
<h2 id="redis-发布订阅"><a href="https://www.redis.net.cn/tutorial/3514.html">Redis 发布订阅</a></h2>
<p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p>
<p>Redis 客户端可以订阅任意数量的频道。</p>
<p>创建了订阅频道名为 redisChat:</p>
<pre><code>SUBSCRIBE redisChat
</code></pre>
<p>重新开启个 redis 客户端，然后在同一个频道 redisChat 发布消息，订阅者就能接收到消息。</p>
<pre><code> PUBLISH redisChat &quot;Redis is a great caching technique&quot;
</code></pre>
<h1 id="redis客户端"><a href="https://www.redis.net.cn/clients/">Redis客户端</a></h1>
<p><a href="https://www.redis.net.cn/clients/">https://www.redis.net.cn/clients/</a></p>
<h2 id="python">Python</h2>
<p><a href="https://www.cnblogs.com/zhaohuhu/p/9140673.html#_label2_13">https://www.cnblogs.com/zhaohuhu/p/9140673.html#_label2_13</a></p>
<pre><code>#!/usr/bin/env python
# -*- coding:utf-8 -*-

import redis


class RedisHelper:

    def __init__(self):
        self.__conn = redis.Redis(host='10.211.55.4')
        self.chan_sub = 'fm104.5'
        self.chan_pub = 'fm104.5'

    def public(self, msg):
        self.__conn.publish(self.chan_pub, msg)
        return True

    def subscribe(self):
        pub = self.__conn.pubsub()
        pub.subscribe(self.chan_sub)
        pub.parse_response()
        return pub
</code></pre>
<p>订阅者</p>
<pre><code>#!/usr/bin/env python
# -*- coding:utf-8 -*-
 
from monitor.RedisHelper import RedisHelper
 
obj = RedisHelper()
redis_sub = obj.subscribe()
 
while True:
    msg= redis_sub.parse_response()
    print msg
</code></pre>
<p>发布者</p>
<pre><code>#!/usr/bin/env python
# -*- coding:utf-8 -*-
 
from monitor.RedisHelper import RedisHelper
 
obj = RedisHelper()
obj.public('hello')
</code></pre>
<p><a href="https://pypi.org/project/redis/">https://pypi.org/project/redis/</a></p>
<p><a href="https://github.com/andymccurdy/redis-py">redis-py</a></p>
<p><a href="https://www.cnblogs.com/leiziv5/p/8308563.htmlhttps://www.cnblogs.com/leiziv5/p/8308563.html">python 实现redis订阅发布功能</a></p>
<pre><code>import  redis
class RedisSubscri():
    def __init__(self,host):
        self.coon=redis.Redis(host=&quot;127.0.0.1&quot;)
    def publish(self,message,channel):#发布
        self.coon.publish(channel,message)
    def subscribe(self,channel):#订阅
        pub=self.coon.pubsub()
        pub.subscribe(channel)
        pub.parse_response()
        return  pub
    def unsubsceribe(self,channel):#取消订阅
        self.coon.pubsub().unsubscribe(channel)
</code></pre>
<p><a href="https://blog.csdn.net/liao392781/article/details/81180999">Python3学习（二十七）：python实现Redis的订阅与发布（sub-pub机制）</a></p>
<p>发布者</p>
<pre><code>#coding:utf-8
import time
import redis
 
number_list = ['300033', '300032', '300031', '300030']
signal = ['1', '-1', '1', '-1']
 
rc = redis.StrictRedis(host='***', port='6379', db=3, password='********')
for i in range(len(number_list)):
    value_new = str(number_list[i]) + ' ' + str(signal[i])
    rc.publish(&quot;liao&quot;, value_new)  #发布消息到liao
</code></pre>
<p>订阅者</p>
<pre><code>#coding:utf-8
import time
import redis
 
rc = redis.StrictRedis(host='****', port='6379', db=3, password='******')
ps = rc.pubsub()
ps.subscribe('liao')  #从liao订阅消息
for item in ps.listen():		#监听状态：有消息发布了就拿过来
    if item['type'] == 'message':
        print item['channel']
        print item['data']
</code></pre>
<p>总结，要点有两个：</p>
<p>一是连接方式。使用python连接redis有三种方式：①使用库中的Redis类（或StrictRedis类，其实差不多）；②使用ConnectionPool连接池（可保持长连接）；③使用Sentinel类（如果有多个redis做集群时，程序会自己选择一个合适的连接）。</p>
<p>二是订阅方法。这里使用的是StrictRedis类中的pubsub方法。连接好之后，可使用subscribe或psubscribe方法来订阅redis消息。其中subscribe是订阅一个频道，psubscribe可订阅多个频道（这样写的时候，作为参数的频道应该是一个列表）。之后就可以开始监听了。</p>
<h1 id="java">Java</h1>
<h1 id="工具">工具</h1>
<p>RedisStudio：<a href="https://github.com/cinience/RedisStudio">https://github.com/cinience/RedisStudio</a></p>
<p>RedisDesktopManager:<a href="https://github.com/uglide/RedisDesktopManager">https://github.com/uglide/RedisDesktopManager</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python学习]]></title>
        <id>https://myclry.github.io//post/python-xue-xi</id>
        <link href="https://myclry.github.io//post/python-xue-xi">
        </link>
        <updated>2019-06-23T07:38:07.000Z</updated>
        <summary type="html"><![CDATA[<p>Python基础教程</p>
]]></summary>
        <content type="html"><![CDATA[<p>Python基础教程</p>
<!-- more -->
<p>暂停程序运行：</p>
<pre><code>#Python2
raw_input(&quot;Press &lt;enter&gt;&quot;)
#Python3
input()
os.system(&quot;pause&quot;)
time.sleep(&quot;second&quot;)
</code></pre>
<p>列表可以修改，元组不能</p>
<p>tuple(seq)把序列转换为元组</p>
<p>strip方法返回去除两侧空格的字符串</p>
<p>translate方法替换单个字符，需要一张maketrans创建的转换表</p>
<p>fromkeys方法使用给定的键建立新的字典</p>
<p>exec语句会执行一系列Python语句，而eveal会计算Python表达式并返回结果值。</p>
<p>文档字符串，def语句后边、模块、类的开头直接写字符串,<code>类.__doc__</code>可获得文档字符串。</p>
<p>任意多的参数</p>
<pre><code>def print_params(*params):
	print(params)
</code></pre>
<p>将其他类名卸载class语句后的原括号内可以指定超类</p>
<p>查看一个类是否是另一个类的子类，使用issubclass</p>
<p>捕捉到异常但是又想重新引发它，调用不带参数的raise</p>
<p>序列和映射</p>
<p>迭代器</p>
<p>生成器</p>
<p>递归生成器</p>
<p>通用生成器</p>
<p>生成器是一个包含yield关键字的函数</p>
<p>包，必须包含__init__.py文件</p>
<p>使用dir函数查看模块包含的内容</p>
<p>sys.platform模块变量是解释器正在其上运行的“平台”的名称</p>
<p>os.sep模块用于路径名中的分隔符</p>
<p>os.linesep用于文本文件的字符串分隔符</p>
<p>os.system与os.startfile启动外部程序</p>
<p>webbrowser模块打开网址</p>
<p>fileinput遍历文本文件所有行</p>
<p>集合Set</p>
<p>堆heap</p>
<p>双端队列 deque</p>
<p>difflib库计算两个序列的相似度</p>
<p>timeit、profile、trace代码效率分析</p>
<p>logging日志</p>
<p>GUI工具包 wxPython</p>
<p>其他GUI包：Tkinter PythonWin JavaSwing PyGTK PyQt</p>
<p>自动序列号：shelve与pickle</p>
<p>数据库PySQLite</p>
<p>网络：socketserver,urllib,urllib2</p>
<p>异步，标准库中的asyncore与asyncahat</p>
<p>Twisted异步网络框架</p>
<p>Tidy修复不规范的HTML文档</p>
<p>Beautiful Soup解析HTML</p>
<p>CGI创建动态网页</p>
<p>使用cgitb调试CGI</p>
<p>mod_python是Apache网络服务器的模块</p>
<p>网络应用程序框架：Django,Pylons，TurboGears</p>
<p>XML_RPC与SOAP远程过程调用</p>
<p>测试工具：profiling,PyChecker,PyLint,unitest，doctest</p>
<p>扩展Python，使用SWING,Jython(Java),IronPython(C#),CPython</p>
<p>其他提高运行速度：Psyco,Pyrex,PyPy,Weave,NumPy,ctypes,Subprocess,PyCXX,SIP,Boost.Python,Modulator</p>
<p>Distutils直接支持SWING</p>
<p>Distutils程序打包</p>
<p>sdist命令用于源代码发布</p>
<p>使用bdist命令创建Windows安装程序和Linux rpm文件</p>
<p>py2exe生成可执行的Windows程序exe文件</p>
<p>ConfigParser配置文件</p>
<p>项目1</p>
<p>txt转网页(Wiki)</p>
<p>项目2</p>
<p>图形生成工具包：<a href="http://www.vex.net/parnassus">Vaults of Parnassus</a></p>
<p>ReportLab与pyx、Matplotlib、pylab画图库</p>
<p>项目3</p>
<p>W3C、W3School、SAX网站学习XML</p>
<p>XML处理：PyXML</p>
<p>项目4</p>
<p>nntplib库，NNTP网络新闻组传输协议</p>
<p>项目5</p>
<p>使用asyncore框架</p>
<p>项目6</p>
<p>CGI远程编辑</p>
<p>项目7</p>
<p>数据库：PostgreSQL,MySQL</p>
<p>使用psycopg与MySQLdb</p>
<p>其他数据库：Metakit,Berkeley DB</p>
<p>项目8</p>
<p>P2P</p>
<p>模块：xmlrpclib,SimpleXMLPRCServer</p>
<p>项目9</p>
<p>wxPython</p>
<p>项目10</p>
<p>Pygame</p>
]]></content>
    </entry>
</feed>